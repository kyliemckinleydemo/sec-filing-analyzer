// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String   @id @default(cuid())
  ticker    String   @unique
  cik       String   // Removed @unique to allow GOOG and GOOGL to share CIK
  name      String
  sector    String?
  industry  String?

  // Yahoo Finance data (current snapshot)
  marketCap            Float?
  peRatio              Float?
  forwardPE            Float?
  currentPrice         Float?
  fiftyTwoWeekHigh     Float?
  fiftyTwoWeekLow      Float?
  analystTargetPrice   Float?
  earningsDate         DateTime?
  yahooFinanceData     String?  // JSON for additional data
  yahooLastUpdated     DateTime?

  filings   Filing[]
  snapshots CompanySnapshot[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Filing {
  id              String    @id @default(cuid())
  companyId       String
  company         Company   @relation(fields: [companyId], references: [id])
  cik             String
  accessionNumber String    @unique
  filingType      String    // "10-K", "10-Q", "8-K"
  filingDate      DateTime
  reportDate      DateTime?
  filingUrl       String

  // AI Analysis Results (JSON)
  analysisData    String?   // JSON stored as text
  aiSummary       String?   // Executive summary
  riskScore       Float?    // 0-10 severity score
  sentimentScore  Float?    // -1 to 1

  // Prediction Results
  predicted7dReturn Float?  // Predicted 7-day return %
  predicted30dReturn Float? // Predicted 30-day return %
  predictionConfidence Float? // 0-1 confidence score

  // Actual returns (backfilled)
  actual7dReturn    Float?   // Actual 7-day return %
  actual30dReturn   Float?   // Actual 30-day return %
  actual7dAlpha     Float?   // 7-day return vs SPX (market-relative)
  actual30dAlpha    Float?   // 30-day return vs SPX

  predictions     Prediction[]
  stockPrices     StockPrice[]
  snapshots       CompanySnapshot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId, filingDate])
  @@index([filingType])
}

model StockPrice {
  id        String   @id @default(cuid())
  ticker    String
  date      DateTime
  open      Float
  high      Float
  low       Float
  close     Float
  volume    Int
  filingId  String?
  filing    Filing?  @relation(fields: [filingId], references: [id])

  @@unique([ticker, date])
  @@index([ticker])
}

model Prediction {
  id              String   @id @default(cuid())
  filingId        String
  filing          Filing   @relation(fields: [filingId], references: [id])
  predictedReturn Float    // 7-day predicted return
  confidence      Float    // 0-1 confidence score
  features        String   // JSON feature vector
  modelVersion    String   // "v1.0"
  createdAt       DateTime @default(now())
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  tier          String   @default("free") // "free", "pro", "enterprise"
  apiKey        String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model CronJobRun {
  id            String   @id @default(cuid())
  jobName       String   // "daily-filings"
  status        String   // "success", "failed", "running"
  startedAt     DateTime @default(now())
  completedAt   DateTime?
  filingsFetched Int     @default(0)
  filingsStored  Int     @default(0)
  companiesProcessed Int @default(0)
  errorMessage  String?

  @@index([jobName, startedAt])
}

model CompanySnapshot {
  id                   String   @id @default(cuid())
  companyId            String
  company              Company  @relation(fields: [companyId], references: [id])

  // Snapshot timestamp
  snapshotDate         DateTime @default(now())

  // Price and valuation metrics
  marketCap            Float?
  currentPrice         Float?
  peRatio              Float?
  forwardPE            Float?
  fiftyTwoWeekHigh     Float?
  fiftyTwoWeekLow      Float?

  // Analyst data
  analystTargetPrice   Float?
  analystRatingCount   Int?     // Total number of analysts covering
  analystBuyCount      Int?     // Number of buy ratings
  analystHoldCount     Int?     // Number of hold ratings
  analystSellCount     Int?     // Number of sell ratings

  // EPS estimates and actuals
  epsActual            Float?   // Trailing twelve months EPS
  epsEstimateCurrentQ  Float?   // Current quarter estimate
  epsEstimateNextQ     Float?   // Next quarter estimate
  epsEstimateCurrentY  Float?   // Current year estimate
  epsEstimateNextY     Float?   // Next year estimate

  // Revenue estimates
  revenueEstimateCurrentQ Float?
  revenueEstimateCurrentY Float?

  // Additional metrics
  dividendYield        Float?
  beta                 Float?
  volume               Float?
  averageVolume        Float?

  // What triggered this snapshot
  triggerType          String?  // "daily_cron", "filing", "manual", "backfill"
  filingId             String?
  filing               Filing?  @relation(fields: [filingId], references: [id])

  createdAt            DateTime @default(now())

  @@index([companyId, snapshotDate])
  @@index([snapshotDate])
  @@index([triggerType])
}

model TechnicalIndicators {
  id        String   @id @default(cuid())
  ticker    String
  date      DateTime

  // Moving averages
  ma30      Float?   // 30-day simple moving average
  ma50      Float?   // 50-day simple moving average
  ma200     Float?   // 200-day simple moving average

  // Price to MA ratios (momentum signals)
  priceToMA30   Float?  // Current price / MA30
  priceToMA50   Float?  // Current price / MA50
  priceToMA200  Float?  // Current price / MA200

  // Momentum indicators
  rsi14         Float?  // 14-day Relative Strength Index (0-100)
  rsi30         Float?  // 30-day RSI
  macd          Float?  // MACD line
  macdSignal    Float?  // MACD signal line
  macdHistogram Float?  // MACD histogram

  // Volatility
  atr14         Float?  // 14-day Average True Range
  volatility30  Float?  // 30-day historical volatility

  // Volume indicators
  volumeMA30    Float?  // 30-day average volume
  volumeRatio   Float?  // Current volume / MA30 volume

  // Return windows (for regime detection)
  return7d      Float?  // 7-day return
  return30d     Float?  // 30-day return
  return90d     Float?  // 90-day return

  createdAt DateTime @default(now())

  @@unique([ticker, date])
  @@index([ticker])
  @@index([date])
}

model MacroIndicators {
  id    String   @id @default(cuid())
  date  DateTime @unique

  // Market indices (close prices and returns)
  spxClose      Float?  // S&P 500 close
  spxReturn7d   Float?  // S&P 500 7-day return
  spxReturn30d  Float?  // S&P 500 30-day return

  // Volatility
  vixClose      Float?  // VIX close
  vixMA30       Float?  // 30-day VIX average

  // Interest rates
  fedFundsRate      Float?  // Federal funds rate
  treasury3m        Float?  // 3-month Treasury yield
  treasury2y        Float?  // 2-year Treasury yield
  treasury10y       Float?  // 10-year Treasury yield
  yieldCurve2y10y   Float?  // 10y - 2y spread (inversion signal)

  // Rate changes (for sensitivity analysis)
  fedFundsChange30d Float?  // Rate change last 30 days
  treasury10yChange30d Float? // 10y yield change last 30 days

  // Sector performance (for relative strength)
  techSectorReturn30d    Float?  // Technology sector 30-day return
  financialSectorReturn30d Float? // Financial sector 30-day return
  energySectorReturn30d   Float?  // Energy sector 30-day return
  healthcareSectorReturn30d Float? // Healthcare sector 30-day return

  createdAt DateTime @default(now())

  @@index([date])
}

// Paper Trading Portfolio
model PaperPortfolio {
  id                String   @id @default(cuid())
  name              String   // "Main Portfolio", "Conservative", etc.
  startingCapital   Float    @default(100000.00)
  currentCash       Float    @default(100000.00)
  totalValue        Float    @default(100000.00) // Cash + positions

  // Performance metrics
  totalReturn       Float    @default(0.00)   // % return since inception
  winRate           Float    @default(0.00)   // % of winning trades
  sharpeRatio       Float?                    // Risk-adjusted return
  maxDrawdown       Float    @default(0.00)   // Worst peak-to-trough decline

  // Trading stats
  totalTrades       Int      @default(0)
  winningTrades     Int      @default(0)
  losingTrades      Int      @default(0)

  // Settings
  maxPositionSize   Float    @default(0.10)   // Max 10% per position
  minConfidence     Float    @default(0.60)   // Only trade if >60% confidence
  isActive          Boolean  @default(true)

  trades            PaperTrade[]
  snapshots         PortfolioSnapshot[]

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Individual paper trades
model PaperTrade {
  id                String   @id @default(cuid())
  portfolioId       String
  portfolio         PaperPortfolio @relation(fields: [portfolioId], references: [id])

  // Trade details
  ticker            String
  filingId          String   // The filing that triggered this trade
  direction         String   // "LONG" or "SHORT"

  // Entry
  entryDate         DateTime
  entryPrice        Float
  shares            Int
  entryValue        Float    // shares * entryPrice

  // Exit
  exitDate          DateTime?
  exitPrice         Float?
  exitValue         Float?   // shares * exitPrice

  // P&L
  realizedPnL       Float?   // exitValue - entryValue
  realizedPnLPct    Float?   // (exitValue - entryValue) / entryValue * 100
  unrealizedPnL     Float?   // Current P&L if still open

  // Model prediction
  predictedReturn   Float    // Model's 7-day return prediction
  confidence        Float    // Model confidence (0-1)
  actualReturn      Float?   // Actual return after exit

  // Status
  status            String   // "OPEN", "CLOSED", "CANCELLED"

  // Risk management
  stopLoss          Float?   // Auto-exit if price drops below
  takeProfit        Float?   // Auto-exit if price rises above

  // Fees (for realism)
  entryCommission   Float    @default(0.00)
  exitCommission    Float?

  // Notes
  notes             String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([portfolioId, status])
  @@index([ticker])
  @@index([entryDate])
}

// Daily portfolio snapshots for charting
model PortfolioSnapshot {
  id              String   @id @default(cuid())
  portfolioId     String
  portfolio       PaperPortfolio @relation(fields: [portfolioId], references: [id])

  date            DateTime
  totalValue      Float
  cashBalance     Float
  positionsValue  Float

  // Daily metrics
  dailyReturn     Float?   // % change from yesterday
  dailyPnL        Float?   // $ change from yesterday

  // Cumulative metrics
  cumulativeReturn Float   // % return since inception
  cumulativePnL    Float   // $ P&L since inception

  // Open positions count
  openPositions   Int      @default(0)

  createdAt       DateTime @default(now())

  @@unique([portfolioId, date])
  @@index([portfolioId, date])
}
